{"version":3,"sources":["Components/Spinner.tsx","Components/CategoryPicker.tsx","Components/TriviaConfig.tsx","Components/QuestionCard.tsx","Helpers/ShuffleArray.ts","Components/Trivia.tsx","App.tsx","index.js"],"names":["Spinner","loading","className","role","CategoryPicker","dataArray","selectHandler","selectedID","value","onChange","aria-label","map","triviaCat","id","name","TriviaConfig","onStart","useFetch","data","errors","useState","noQuestions","setNoQuestions","selectedCategoryID","setSelectedCategoryID","selectedDifficulty","setSelectedDifficulty","selectedType","setSelectedType","type","evt","target","aria-describedby","trivia_categories","onClick","category","difficulty","questionFormat","QuestionCard","question","pointHandler","checkedIndex","setCheckedIndex","isAnswerChecked","setIsAnswerChecked","possibleAnswers","setPossibleAnswers","useEffect","undefined","array","topNumber","newArray","length","push","splice","Math","floor","random","shuffleArray","correct_answer","incorrect_answers","determineClassName","answer","idx","isCorrect","dangerouslySetInnerHTML","__html","Fragment","autoComplete","checked","readOnly","htmlFor","disabled","isNaN","Trivia","questions","points","setPoints","displayResults","setDisplayResults","questionIndex","setQuestionIndex","href","style","width","transform","display","justifyContent","prevIndex","App","setQuestions","started","setStarted","triggerQuery","dataInput","a","fetch","response","json","results","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f064d81f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Spinner = ({ loading }: { loading: boolean }) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{loading && (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<div className='spinner-border text-info' role='status'>\r\n\t\t\t\t\t\t<span className='visually-hidden'>Loading...</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Spinner;\r\n","import { ChangeEventHandler } from \"react\";\r\nimport { TriviaCategory } from \"../Hooks/Categories\";\r\n\r\nconst CategoryPicker = ({\r\n\tdataArray,\r\n\tselectHandler,\r\n\tselectedID,\r\n}: {\r\n\tdataArray: TriviaCategory[];\r\n\tselectHandler: ChangeEventHandler<HTMLSelectElement>;\r\n\tselectedID: string;\r\n}) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h4>Select a category</h4>\r\n\t\t\t<div className='my-3'>\r\n\t\t\t\t<select\r\n\t\t\t\t\tvalue={selectedID}\r\n\t\t\t\t\tonChange={selectHandler}\r\n\t\t\t\t\tclassName='form-select'\r\n\t\t\t\t\taria-label='Default select example'>\r\n\t\t\t\t\t<option key='0' value='0'>\r\n\t\t\t\t\t\tAll mixed up!\r\n\t\t\t\t\t</option>\r\n\t\t\t\t\t{dataArray.map((triviaCat) => (\r\n\t\t\t\t\t\t<option key={triviaCat.id} value={triviaCat.id}>\r\n\t\t\t\t\t\t\t{triviaCat.name}\r\n\t\t\t\t\t\t</option>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</select>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default CategoryPicker;\r\n","import { ChangeEventHandler, useState } from \"react\";\r\nimport { Categories } from \"../Hooks/Categories\";\r\n\r\nimport { useFetch } from \"../Hooks\";\r\n\r\nimport Spinner from \"./Spinner\";\r\nimport CategoryPicker from \"./CategoryPicker\";\r\n\r\nimport { QueryParams } from \"../App\";\r\n\r\nconst TriviaConfig = ({\r\n\tonStart,\r\n}: {\r\n\tonStart: (args: QueryParams) => void;\r\n}) => {\r\n\tconst { data, errors, loading } = useFetch<Categories>(\r\n\t\t\"https://opentdb.com/api_category.php\"\r\n\t);\r\n\r\n\tconst [noQuestions, setNoQuestions] = useState(\"10\");\r\n\r\n\tconst [selectedCategoryID, setSelectedCategoryID] = useState(\"0\");\r\n\tconst [selectedDifficulty, setSelectedDifficulty] = useState(\"\");\r\n\tconst [selectedType, setSelectedType] = useState(\"\");\r\n\r\n\tconst selectOnChange: ChangeEventHandler<HTMLSelectElement> = (evt) => {\r\n\t\tsetSelectedCategoryID(evt.target.value);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Spinner loading={loading} />\r\n\t\t\t{!loading && !errors && (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<h4>Choose number of questions</h4>\r\n\t\t\t\t\t<div className='input-group my-3'>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype='number'\r\n\t\t\t\t\t\t\tclassName='form-control'\r\n\t\t\t\t\t\t\tvalue={noQuestions}\r\n\t\t\t\t\t\t\tonChange={(evt) => setNoQuestions(evt.target.value)}\r\n\t\t\t\t\t\t\taria-label='noquestions'\r\n\t\t\t\t\t\t\taria-describedby='basic-addon1'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<h4>Select a Difficulty</h4>\r\n\t\t\t\t\t<div className='my-3'>\r\n\t\t\t\t\t\t<select\r\n\t\t\t\t\t\t\tvalue={selectedDifficulty}\r\n\t\t\t\t\t\t\tonChange={(evt) =>\r\n\t\t\t\t\t\t\t\tsetSelectedDifficulty(evt.target.value)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tclassName='form-select'\r\n\t\t\t\t\t\t\taria-label='Default select example'>\r\n\t\t\t\t\t\t\t<option key='0' value=''>\r\n\t\t\t\t\t\t\t\tAnything goes!\r\n\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t<option key='1' value='easy'>\r\n\t\t\t\t\t\t\t\tEasy\r\n\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t<option key='2' value='medium'>\r\n\t\t\t\t\t\t\t\tMedium\r\n\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t<option key='3' value='hard'>\r\n\t\t\t\t\t\t\t\tHard\r\n\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<h4>Select a Question Format</h4>\r\n\t\t\t\t\t<div className='my-3'>\r\n\t\t\t\t\t\t<select\r\n\t\t\t\t\t\t\tvalue={selectedType}\r\n\t\t\t\t\t\t\tonChange={(evt) =>\r\n\t\t\t\t\t\t\t\tsetSelectedType(evt.target.value)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tclassName='form-select'\r\n\t\t\t\t\t\t\taria-label='Default select example'>\r\n\t\t\t\t\t\t\t<option key='0' value=''>\r\n\t\t\t\t\t\t\t\tAny!\r\n\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t<option key='1' value='boolean'>\r\n\t\t\t\t\t\t\t\tTrue/False\r\n\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t<option key='2' value='multiple'>\r\n\t\t\t\t\t\t\t\tMultiple Options\r\n\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<CategoryPicker\r\n\t\t\t\t\t\tdataArray={data!.trivia_categories}\r\n\t\t\t\t\t\tselectHandler={selectOnChange}\r\n\t\t\t\t\t\tselectedID={selectedCategoryID}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName='btn btn-primary mt-3'\r\n\t\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\t\tonStart({\r\n\t\t\t\t\t\t\t\tcategory: selectedCategoryID,\r\n\t\t\t\t\t\t\t\tdifficulty: selectedDifficulty,\r\n\t\t\t\t\t\t\t\tnoQuestions: noQuestions,\r\n\t\t\t\t\t\t\t\tquestionFormat: selectedType,\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}>\r\n\t\t\t\t\t\tStart Playing!\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default TriviaConfig;\r\n","import React, { Dispatch, SetStateAction, useEffect, useState } from \"react\";\r\nimport { shuffleArray } from \"../Helpers/ShuffleArray\";\r\nimport { Question } from \"../Hooks/Questions\";\r\n\r\nconst QuestionCard = ({\r\n\tquestion,\r\n\tpointHandler,\r\n}: {\r\n\tquestion: Question;\r\n\tpointHandler: Dispatch<SetStateAction<number>>;\r\n}) => {\r\n\tconst [checkedIndex, setCheckedIndex] = useState<number>();\r\n\tconst [isAnswerChecked, setIsAnswerChecked] = useState(false);\r\n\tconst [possibleAnswers, setPossibleAnswers] = useState<string[]>([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetIsAnswerChecked(false);\r\n\t\tsetCheckedIndex(undefined);\r\n\t\tsetPossibleAnswers(\r\n\t\t\tshuffleArray([\r\n\t\t\t\tquestion.correct_answer,\r\n\t\t\t\t...question.incorrect_answers,\r\n\t\t\t])\r\n\t\t);\r\n\t}, [question]);\r\n\r\n\tconst determineClassName = (answer: string, idx: number) => {\r\n\t\tconst isCorrect = question.correct_answer === answer;\r\n\r\n\t\tif (!isAnswerChecked || (!isCorrect && checkedIndex !== idx)) {\r\n\t\t\treturn \"btn-outline-dark\";\r\n\t\t}\r\n\r\n\t\tif (isCorrect) {\r\n\t\t\treturn \"btn-success\";\r\n\t\t}\r\n\t\treturn \"btn-danger\";\r\n\t};\r\n\r\n\tconst handleClick = () => {\r\n\t\tif (possibleAnswers[checkedIndex!] === question.correct_answer) {\r\n\t\t\tpointHandler((value) => value + 1);\r\n\t\t} else {\r\n\t\t\tpointHandler((value) => value - 1);\r\n\t\t}\r\n\t\tsetIsAnswerChecked(true);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div\r\n\t\t\t\tclassName='mb-3'\r\n\t\t\t\tdangerouslySetInnerHTML={{ __html: question.question }}></div>\r\n\t\t\t{possibleAnswers.map((answer, idx) => (\r\n\t\t\t\t<React.Fragment key={answer}>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='checkbox'\r\n\t\t\t\t\t\tclassName='btn-check'\r\n\t\t\t\t\t\tname='questionAnswer'\r\n\t\t\t\t\t\tid={`option${idx}`}\r\n\t\t\t\t\t\tautoComplete='off'\r\n\t\t\t\t\t\tvalue={idx}\r\n\t\t\t\t\t\tchecked={checkedIndex === idx}\r\n\t\t\t\t\t\treadOnly\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<label\r\n\t\t\t\t\t\tclassName={`btn ${determineClassName(answer, idx)}`}\r\n\t\t\t\t\t\thtmlFor='questionAnswer'\r\n\t\t\t\t\t\tdangerouslySetInnerHTML={{\r\n\t\t\t\t\t\t\t__html: answer,\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tonClick={() => setCheckedIndex(idx)}></label>\r\n\t\t\t\t</React.Fragment>\r\n\t\t\t))}\r\n\t\t\t<hr />\r\n\t\t\t<button\r\n\t\t\t\tclassName='btn btn-primary mb-3'\r\n\t\t\t\tonClick={() => {\r\n\t\t\t\t\thandleClick();\r\n\t\t\t\t}}\r\n\t\t\t\tdisabled={isNaN(checkedIndex!) || isAnswerChecked}>\r\n\t\t\t\tCheck Answer\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default QuestionCard;\r\n","export const randomNumber = (topNumber: number): number =>\r\n\tMath.floor(Math.random() * topNumber) % topNumber;\r\n\r\nexport const shuffleArray = <T>(array: T[]): T[] => {\r\n\tconst newArray: T[] = [];\r\n\r\n\twhile (array.length !== 0) {\r\n\t\tnewArray.push(array.splice(randomNumber(array.length), 1)[0]);\r\n\t}\r\n\r\n\treturn newArray;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Question } from \"../Hooks/Questions\";\r\nimport QuestionCard from \"./QuestionCard\";\r\n\r\nconst Trivia = ({ questions }: { questions: Question[] }) => {\r\n\tconst [points, setPoints] = useState(0);\r\n\tconst [displayResults, setDisplayResults] = useState(false);\r\n\r\n\tconst [questionIndex, setQuestionIndex] = useState<number>(0);\r\n\r\n\tif (displayResults) {\r\n\t\treturn (\r\n\t\t\t<div className='alert-success p-5'>\r\n\t\t\t\t<h1>\r\n\t\t\t\t\tResults: You got {points}/{questions.length} points!\r\n\t\t\t\t</h1>\r\n\r\n\t\t\t\t<a href='/' className='btn btn-success'>\r\n\t\t\t\t\tPlay Again!\r\n\t\t\t\t</a>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\treturn (\r\n\t\t<div className='bg-white text-dark py-3'>\r\n\t\t\t<div\r\n\t\t\t\tclassName='mb-3'\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\twidth: \"50%\",\r\n\t\t\t\t\ttransform: \"translateX(50%)\",\r\n\t\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\t\tjustifyContent: \"space-between\",\r\n\t\t\t\t}}>\r\n\t\t\t\t<span>\r\n\t\t\t\t\tQuestion No: {questionIndex + 1}/{questions.length}\r\n\t\t\t\t</span>\r\n\r\n\t\t\t\t<span>Points: {points}</span>\r\n\t\t\t</div>\r\n\r\n\t\t\t<QuestionCard\r\n\t\t\t\tquestion={questions[questionIndex]}\r\n\t\t\t\tpointHandler={setPoints}\r\n\t\t\t/>\r\n\r\n\t\t\t{questionIndex !== questions.length - 1 ? (\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName='btn btn-success'\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tsetQuestionIndex((prevIndex) => prevIndex + 1);\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\tNext Question (Skip)\r\n\t\t\t\t</button>\r\n\t\t\t) : (\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName='btn btn-danger'\r\n\t\t\t\t\tonClick={() => setDisplayResults(true)}>\r\n\t\t\t\t\tDisplay results\r\n\t\t\t\t</button>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Trivia;\r\n","import \"./App.css\";\nimport TriviaConfig from \"./Components/TriviaConfig\";\nimport { Question, QuestionsResponse } from \"./Hooks/Questions\";\nimport { useState } from \"react\";\nimport Trivia from \"./Components/Trivia\";\n\nexport interface QueryParams {\n\tnoQuestions: string;\n\tdifficulty: string;\n\tquestionFormat: string;\n\tcategory: string;\n}\n\nfunction App() {\n\tconst [questions, setQuestions] = useState<Question[]>();\n\tconst [started, setStarted] = useState(false);\n\n\tconst triggerQuery = async (dataInput: QueryParams) => {\n\t\tconst { noQuestions, category, difficulty, questionFormat } = dataInput;\n\n\t\tconst response = await fetch(\n\t\t\t`https://opentdb.com/api.php?amount=${noQuestions}&category=${category}&difficulty=${difficulty}&type=${questionFormat}`\n\t\t);\n\n\t\tconst data: QuestionsResponse = await response.json();\n\n\t\tsetQuestions(data.results);\n\t\tsetStarted(true);\n\t};\n\treturn (\n\t\t<div className='App'>\n\t\t\t<header className='App-header'>\n\t\t\t\t<div className='container'>\n\t\t\t\t\t<h1 className='title'>Welcome to the Trivia!</h1>\n\t\t\t\t\t{!started ? (\n\t\t\t\t\t\t<TriviaConfig onStart={triggerQuery} />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Trivia questions={questions!} />\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}